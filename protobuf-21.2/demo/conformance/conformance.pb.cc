// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: conformance.proto

#include "conformance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace conformance {
PROTOBUF_CONSTEXPR FailureSet::FailureSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.failure_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FailureSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FailureSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FailureSetDefaultTypeInternal() {}
  union {
    FailureSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FailureSetDefaultTypeInternal _FailureSet_default_instance_;
PROTOBUF_CONSTEXPR ConformanceRequest::ConformanceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jspb_encoding_options_)*/nullptr
  , /*decltype(_impl_.requested_output_format_)*/0
  , /*decltype(_impl_.test_category_)*/0
  , /*decltype(_impl_.print_unknown_fields_)*/false
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ConformanceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConformanceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConformanceRequestDefaultTypeInternal() {}
  union {
    ConformanceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConformanceRequestDefaultTypeInternal _ConformanceRequest_default_instance_;
PROTOBUF_CONSTEXPR ConformanceResponse::ConformanceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ConformanceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConformanceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConformanceResponseDefaultTypeInternal() {}
  union {
    ConformanceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConformanceResponseDefaultTypeInternal _ConformanceResponse_default_instance_;
PROTOBUF_CONSTEXPR JspbEncodingConfig::JspbEncodingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.use_jspb_array_any_format_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JspbEncodingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JspbEncodingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JspbEncodingConfigDefaultTypeInternal() {}
  union {
    JspbEncodingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JspbEncodingConfigDefaultTypeInternal _JspbEncodingConfig_default_instance_;
}  // namespace conformance
static ::_pb::Metadata file_level_metadata_conformance_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_conformance_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_conformance_2eproto = nullptr;

const uint32_t TableStruct_conformance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::conformance::FailureSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::conformance::FailureSet, _impl_.failure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::conformance::ConformanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::conformance::ConformanceRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::conformance::ConformanceRequest, _impl_.requested_output_format_),
  PROTOBUF_FIELD_OFFSET(::conformance::ConformanceRequest, _impl_.message_type_),
  PROTOBUF_FIELD_OFFSET(::conformance::ConformanceRequest, _impl_.test_category_),
  PROTOBUF_FIELD_OFFSET(::conformance::ConformanceRequest, _impl_.jspb_encoding_options_),
  PROTOBUF_FIELD_OFFSET(::conformance::ConformanceRequest, _impl_.print_unknown_fields_),
  PROTOBUF_FIELD_OFFSET(::conformance::ConformanceRequest, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::conformance::ConformanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::conformance::ConformanceResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::conformance::ConformanceResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::conformance::JspbEncodingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::conformance::JspbEncodingConfig, _impl_.use_jspb_array_any_format_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::conformance::FailureSet)},
  { 7, -1, -1, sizeof(::conformance::ConformanceRequest)},
  { 23, -1, -1, sizeof(::conformance::ConformanceResponse)},
  { 38, -1, -1, sizeof(::conformance::JspbEncodingConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::conformance::_FailureSet_default_instance_._instance,
  &::conformance::_ConformanceRequest_default_instance_._instance,
  &::conformance::_ConformanceResponse_default_instance_._instance,
  &::conformance::_JspbEncodingConfig_default_instance_._instance,
};

const char descriptor_table_protodef_conformance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021conformance.proto\022\013conformance\"\035\n\nFail"
  "ureSet\022\017\n\007failure\030\001 \003(\t\"\343\002\n\022ConformanceR"
  "equest\022\032\n\020protobuf_payload\030\001 \001(\014H\000\022\026\n\014js"
  "on_payload\030\002 \001(\tH\000\022\026\n\014jspb_payload\030\007 \001(\t"
  "H\000\022\026\n\014text_payload\030\010 \001(\tH\000\0228\n\027requested_"
  "output_format\030\003 \001(\0162\027.conformance.WireFo"
  "rmat\022\024\n\014message_type\030\004 \001(\t\0220\n\rtest_categ"
  "ory\030\005 \001(\0162\031.conformance.TestCategory\022>\n\025"
  "jspb_encoding_options\030\006 \001(\0132\037.conformanc"
  "e.JspbEncodingConfig\022\034\n\024print_unknown_fi"
  "elds\030\t \001(\010B\t\n\007payload\"\341\001\n\023ConformanceRes"
  "ponse\022\025\n\013parse_error\030\001 \001(\tH\000\022\031\n\017serializ"
  "e_error\030\006 \001(\tH\000\022\027\n\rruntime_error\030\002 \001(\tH\000"
  "\022\032\n\020protobuf_payload\030\003 \001(\014H\000\022\026\n\014json_pay"
  "load\030\004 \001(\tH\000\022\021\n\007skipped\030\005 \001(\tH\000\022\026\n\014jspb_"
  "payload\030\007 \001(\tH\000\022\026\n\014text_payload\030\010 \001(\tH\000B"
  "\010\n\006result\"7\n\022JspbEncodingConfig\022!\n\031use_j"
  "spb_array_any_format\030\001 \001(\010*P\n\nWireFormat"
  "\022\017\n\013UNSPECIFIED\020\000\022\014\n\010PROTOBUF\020\001\022\010\n\004JSON\020"
  "\002\022\010\n\004JSPB\020\003\022\017\n\013TEXT_FORMAT\020\004*\217\001\n\014TestCat"
  "egory\022\024\n\020UNSPECIFIED_TEST\020\000\022\017\n\013BINARY_TE"
  "ST\020\001\022\r\n\tJSON_TEST\020\002\022$\n JSON_IGNORE_UNKNO"
  "WN_PARSING_TEST\020\003\022\r\n\tJSPB_TEST\020\004\022\024\n\020TEXT"
  "_FORMAT_TEST\020\005B!\n\037com.google.protobuf.co"
  "nformanceb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_conformance_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_conformance_2eproto = {
    false, false, 977, descriptor_table_protodef_conformance_2eproto,
    "conformance.proto",
    &descriptor_table_conformance_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_conformance_2eproto::offsets,
    file_level_metadata_conformance_2eproto, file_level_enum_descriptors_conformance_2eproto,
    file_level_service_descriptors_conformance_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_conformance_2eproto_getter() {
  return &descriptor_table_conformance_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_conformance_2eproto(&descriptor_table_conformance_2eproto);
namespace conformance {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WireFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_conformance_2eproto);
  return file_level_enum_descriptors_conformance_2eproto[0];
}
bool WireFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_conformance_2eproto);
  return file_level_enum_descriptors_conformance_2eproto[1];
}
bool TestCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FailureSet::_Internal {
 public:
};

FailureSet::FailureSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:conformance.FailureSet)
}
FailureSet::FailureSet(const FailureSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FailureSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.failure_){from._impl_.failure_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:conformance.FailureSet)
}

inline void FailureSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.failure_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FailureSet::~FailureSet() {
  // @@protoc_insertion_point(destructor:conformance.FailureSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FailureSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.failure_.~RepeatedPtrField();
}

void FailureSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FailureSet::Clear() {
// @@protoc_insertion_point(message_clear_start:conformance.FailureSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.failure_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FailureSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string failure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failure();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "conformance.FailureSet.failure"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FailureSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:conformance.FailureSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string failure = 1;
  for (int i = 0, n = this->_internal_failure_size(); i < n; i++) {
    const auto& s = this->_internal_failure(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.FailureSet.failure");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:conformance.FailureSet)
  return target;
}

size_t FailureSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:conformance.FailureSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string failure = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.failure_.size());
  for (int i = 0, n = _impl_.failure_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.failure_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FailureSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FailureSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FailureSet::GetClassData() const { return &_class_data_; }


void FailureSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FailureSet*>(&to_msg);
  auto& from = static_cast<const FailureSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:conformance.FailureSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.failure_.MergeFrom(from._impl_.failure_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FailureSet::CopyFrom(const FailureSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:conformance.FailureSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailureSet::IsInitialized() const {
  return true;
}

void FailureSet::InternalSwap(FailureSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.failure_.InternalSwap(&other->_impl_.failure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FailureSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conformance_2eproto_getter, &descriptor_table_conformance_2eproto_once,
      file_level_metadata_conformance_2eproto[0]);
}

// ===================================================================

class ConformanceRequest::_Internal {
 public:
  static const ::conformance::JspbEncodingConfig& jspb_encoding_options(const ConformanceRequest* msg);
};

const ::conformance::JspbEncodingConfig&
ConformanceRequest::_Internal::jspb_encoding_options(const ConformanceRequest* msg) {
  return *msg->_impl_.jspb_encoding_options_;
}
ConformanceRequest::ConformanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:conformance.ConformanceRequest)
}
ConformanceRequest::ConformanceRequest(const ConformanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConformanceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_type_){}
    , decltype(_impl_.jspb_encoding_options_){nullptr}
    , decltype(_impl_.requested_output_format_){}
    , decltype(_impl_.test_category_){}
    , decltype(_impl_.print_unknown_fields_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_type().empty()) {
    _this->_impl_.message_type_.Set(from._internal_message_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_jspb_encoding_options()) {
    _this->_impl_.jspb_encoding_options_ = new ::conformance::JspbEncodingConfig(*from._impl_.jspb_encoding_options_);
  }
  ::memcpy(&_impl_.requested_output_format_, &from._impl_.requested_output_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.print_unknown_fields_) -
    reinterpret_cast<char*>(&_impl_.requested_output_format_)) + sizeof(_impl_.print_unknown_fields_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kProtobufPayload: {
      _this->_internal_set_protobuf_payload(from._internal_protobuf_payload());
      break;
    }
    case kJsonPayload: {
      _this->_internal_set_json_payload(from._internal_json_payload());
      break;
    }
    case kJspbPayload: {
      _this->_internal_set_jspb_payload(from._internal_jspb_payload());
      break;
    }
    case kTextPayload: {
      _this->_internal_set_text_payload(from._internal_text_payload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:conformance.ConformanceRequest)
}

inline void ConformanceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_type_){}
    , decltype(_impl_.jspb_encoding_options_){nullptr}
    , decltype(_impl_.requested_output_format_){0}
    , decltype(_impl_.test_category_){0}
    , decltype(_impl_.print_unknown_fields_){false}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.message_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_payload();
}

ConformanceRequest::~ConformanceRequest() {
  // @@protoc_insertion_point(destructor:conformance.ConformanceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConformanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.jspb_encoding_options_;
  if (has_payload()) {
    clear_payload();
  }
}

void ConformanceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConformanceRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:conformance.ConformanceRequest)
  switch (payload_case()) {
    case kProtobufPayload: {
      _impl_.payload_.protobuf_payload_.Destroy();
      break;
    }
    case kJsonPayload: {
      _impl_.payload_.json_payload_.Destroy();
      break;
    }
    case kJspbPayload: {
      _impl_.payload_.jspb_payload_.Destroy();
      break;
    }
    case kTextPayload: {
      _impl_.payload_.text_payload_.Destroy();
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ConformanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:conformance.ConformanceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.jspb_encoding_options_ != nullptr) {
    delete _impl_.jspb_encoding_options_;
  }
  _impl_.jspb_encoding_options_ = nullptr;
  ::memset(&_impl_.requested_output_format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.print_unknown_fields_) -
      reinterpret_cast<char*>(&_impl_.requested_output_format_)) + sizeof(_impl_.print_unknown_fields_));
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConformanceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes protobuf_payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_protobuf_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string json_payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_json_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "conformance.ConformanceRequest.json_payload"));
        } else
          goto handle_unusual;
        continue;
      // .conformance.WireFormat requested_output_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_requested_output_format(static_cast<::conformance::WireFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // string message_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "conformance.ConformanceRequest.message_type"));
        } else
          goto handle_unusual;
        continue;
      // .conformance.TestCategory test_category = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_test_category(static_cast<::conformance::TestCategory>(val));
        } else
          goto handle_unusual;
        continue;
      // .conformance.JspbEncodingConfig jspb_encoding_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_jspb_encoding_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string jspb_payload = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_jspb_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "conformance.ConformanceRequest.jspb_payload"));
        } else
          goto handle_unusual;
        continue;
      // string text_payload = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_text_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "conformance.ConformanceRequest.text_payload"));
        } else
          goto handle_unusual;
        continue;
      // bool print_unknown_fields = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.print_unknown_fields_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConformanceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:conformance.ConformanceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes protobuf_payload = 1;
  if (_internal_has_protobuf_payload()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_protobuf_payload(), target);
  }

  // string json_payload = 2;
  if (_internal_has_json_payload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json_payload().data(), static_cast<int>(this->_internal_json_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.ConformanceRequest.json_payload");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_json_payload(), target);
  }

  // .conformance.WireFormat requested_output_format = 3;
  if (this->_internal_requested_output_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_requested_output_format(), target);
  }

  // string message_type = 4;
  if (!this->_internal_message_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.ConformanceRequest.message_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message_type(), target);
  }

  // .conformance.TestCategory test_category = 5;
  if (this->_internal_test_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_test_category(), target);
  }

  // .conformance.JspbEncodingConfig jspb_encoding_options = 6;
  if (this->_internal_has_jspb_encoding_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::jspb_encoding_options(this),
        _Internal::jspb_encoding_options(this).GetCachedSize(), target, stream);
  }

  // string jspb_payload = 7;
  if (_internal_has_jspb_payload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jspb_payload().data(), static_cast<int>(this->_internal_jspb_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.ConformanceRequest.jspb_payload");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_jspb_payload(), target);
  }

  // string text_payload = 8;
  if (_internal_has_text_payload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_payload().data(), static_cast<int>(this->_internal_text_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.ConformanceRequest.text_payload");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_text_payload(), target);
  }

  // bool print_unknown_fields = 9;
  if (this->_internal_print_unknown_fields() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_print_unknown_fields(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:conformance.ConformanceRequest)
  return target;
}

size_t ConformanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:conformance.ConformanceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_type = 4;
  if (!this->_internal_message_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_type());
  }

  // .conformance.JspbEncodingConfig jspb_encoding_options = 6;
  if (this->_internal_has_jspb_encoding_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.jspb_encoding_options_);
  }

  // .conformance.WireFormat requested_output_format = 3;
  if (this->_internal_requested_output_format() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_requested_output_format());
  }

  // .conformance.TestCategory test_category = 5;
  if (this->_internal_test_category() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_test_category());
  }

  // bool print_unknown_fields = 9;
  if (this->_internal_print_unknown_fields() != 0) {
    total_size += 1 + 1;
  }

  switch (payload_case()) {
    // bytes protobuf_payload = 1;
    case kProtobufPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_protobuf_payload());
      break;
    }
    // string json_payload = 2;
    case kJsonPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_payload());
      break;
    }
    // string jspb_payload = 7;
    case kJspbPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_jspb_payload());
      break;
    }
    // string text_payload = 8;
    case kTextPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_payload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConformanceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConformanceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConformanceRequest::GetClassData() const { return &_class_data_; }


void ConformanceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConformanceRequest*>(&to_msg);
  auto& from = static_cast<const ConformanceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:conformance.ConformanceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_type().empty()) {
    _this->_internal_set_message_type(from._internal_message_type());
  }
  if (from._internal_has_jspb_encoding_options()) {
    _this->_internal_mutable_jspb_encoding_options()->::conformance::JspbEncodingConfig::MergeFrom(
        from._internal_jspb_encoding_options());
  }
  if (from._internal_requested_output_format() != 0) {
    _this->_internal_set_requested_output_format(from._internal_requested_output_format());
  }
  if (from._internal_test_category() != 0) {
    _this->_internal_set_test_category(from._internal_test_category());
  }
  if (from._internal_print_unknown_fields() != 0) {
    _this->_internal_set_print_unknown_fields(from._internal_print_unknown_fields());
  }
  switch (from.payload_case()) {
    case kProtobufPayload: {
      _this->_internal_set_protobuf_payload(from._internal_protobuf_payload());
      break;
    }
    case kJsonPayload: {
      _this->_internal_set_json_payload(from._internal_json_payload());
      break;
    }
    case kJspbPayload: {
      _this->_internal_set_jspb_payload(from._internal_jspb_payload());
      break;
    }
    case kTextPayload: {
      _this->_internal_set_text_payload(from._internal_text_payload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConformanceRequest::CopyFrom(const ConformanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:conformance.ConformanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConformanceRequest::IsInitialized() const {
  return true;
}

void ConformanceRequest::InternalSwap(ConformanceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_type_, lhs_arena,
      &other->_impl_.message_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConformanceRequest, _impl_.print_unknown_fields_)
      + sizeof(ConformanceRequest::_impl_.print_unknown_fields_)
      - PROTOBUF_FIELD_OFFSET(ConformanceRequest, _impl_.jspb_encoding_options_)>(
          reinterpret_cast<char*>(&_impl_.jspb_encoding_options_),
          reinterpret_cast<char*>(&other->_impl_.jspb_encoding_options_));
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConformanceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conformance_2eproto_getter, &descriptor_table_conformance_2eproto_once,
      file_level_metadata_conformance_2eproto[1]);
}

// ===================================================================

class ConformanceResponse::_Internal {
 public:
};

ConformanceResponse::ConformanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:conformance.ConformanceResponse)
}
ConformanceResponse::ConformanceResponse(const ConformanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConformanceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_result();
  switch (from.result_case()) {
    case kParseError: {
      _this->_internal_set_parse_error(from._internal_parse_error());
      break;
    }
    case kSerializeError: {
      _this->_internal_set_serialize_error(from._internal_serialize_error());
      break;
    }
    case kRuntimeError: {
      _this->_internal_set_runtime_error(from._internal_runtime_error());
      break;
    }
    case kProtobufPayload: {
      _this->_internal_set_protobuf_payload(from._internal_protobuf_payload());
      break;
    }
    case kJsonPayload: {
      _this->_internal_set_json_payload(from._internal_json_payload());
      break;
    }
    case kSkipped: {
      _this->_internal_set_skipped(from._internal_skipped());
      break;
    }
    case kJspbPayload: {
      _this->_internal_set_jspb_payload(from._internal_jspb_payload());
      break;
    }
    case kTextPayload: {
      _this->_internal_set_text_payload(from._internal_text_payload());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:conformance.ConformanceResponse)
}

inline void ConformanceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_result();
}

ConformanceResponse::~ConformanceResponse() {
  // @@protoc_insertion_point(destructor:conformance.ConformanceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConformanceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_result()) {
    clear_result();
  }
}

void ConformanceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConformanceResponse::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:conformance.ConformanceResponse)
  switch (result_case()) {
    case kParseError: {
      _impl_.result_.parse_error_.Destroy();
      break;
    }
    case kSerializeError: {
      _impl_.result_.serialize_error_.Destroy();
      break;
    }
    case kRuntimeError: {
      _impl_.result_.runtime_error_.Destroy();
      break;
    }
    case kProtobufPayload: {
      _impl_.result_.protobuf_payload_.Destroy();
      break;
    }
    case kJsonPayload: {
      _impl_.result_.json_payload_.Destroy();
      break;
    }
    case kSkipped: {
      _impl_.result_.skipped_.Destroy();
      break;
    }
    case kJspbPayload: {
      _impl_.result_.jspb_payload_.Destroy();
      break;
    }
    case kTextPayload: {
      _impl_.result_.text_payload_.Destroy();
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}


void ConformanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:conformance.ConformanceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConformanceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parse_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parse_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "conformance.ConformanceResponse.parse_error"));
        } else
          goto handle_unusual;
        continue;
      // string runtime_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_runtime_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "conformance.ConformanceResponse.runtime_error"));
        } else
          goto handle_unusual;
        continue;
      // bytes protobuf_payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_protobuf_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string json_payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_json_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "conformance.ConformanceResponse.json_payload"));
        } else
          goto handle_unusual;
        continue;
      // string skipped = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_skipped();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "conformance.ConformanceResponse.skipped"));
        } else
          goto handle_unusual;
        continue;
      // string serialize_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_serialize_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "conformance.ConformanceResponse.serialize_error"));
        } else
          goto handle_unusual;
        continue;
      // string jspb_payload = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_jspb_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "conformance.ConformanceResponse.jspb_payload"));
        } else
          goto handle_unusual;
        continue;
      // string text_payload = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_text_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "conformance.ConformanceResponse.text_payload"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConformanceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:conformance.ConformanceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parse_error = 1;
  if (_internal_has_parse_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parse_error().data(), static_cast<int>(this->_internal_parse_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.ConformanceResponse.parse_error");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parse_error(), target);
  }

  // string runtime_error = 2;
  if (_internal_has_runtime_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_error().data(), static_cast<int>(this->_internal_runtime_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.ConformanceResponse.runtime_error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_runtime_error(), target);
  }

  // bytes protobuf_payload = 3;
  if (_internal_has_protobuf_payload()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_protobuf_payload(), target);
  }

  // string json_payload = 4;
  if (_internal_has_json_payload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json_payload().data(), static_cast<int>(this->_internal_json_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.ConformanceResponse.json_payload");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_json_payload(), target);
  }

  // string skipped = 5;
  if (_internal_has_skipped()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skipped().data(), static_cast<int>(this->_internal_skipped().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.ConformanceResponse.skipped");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_skipped(), target);
  }

  // string serialize_error = 6;
  if (_internal_has_serialize_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serialize_error().data(), static_cast<int>(this->_internal_serialize_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.ConformanceResponse.serialize_error");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_serialize_error(), target);
  }

  // string jspb_payload = 7;
  if (_internal_has_jspb_payload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jspb_payload().data(), static_cast<int>(this->_internal_jspb_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.ConformanceResponse.jspb_payload");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_jspb_payload(), target);
  }

  // string text_payload = 8;
  if (_internal_has_text_payload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_payload().data(), static_cast<int>(this->_internal_text_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "conformance.ConformanceResponse.text_payload");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_text_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:conformance.ConformanceResponse)
  return target;
}

size_t ConformanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:conformance.ConformanceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (result_case()) {
    // string parse_error = 1;
    case kParseError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parse_error());
      break;
    }
    // string serialize_error = 6;
    case kSerializeError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serialize_error());
      break;
    }
    // string runtime_error = 2;
    case kRuntimeError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_runtime_error());
      break;
    }
    // bytes protobuf_payload = 3;
    case kProtobufPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_protobuf_payload());
      break;
    }
    // string json_payload = 4;
    case kJsonPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_payload());
      break;
    }
    // string skipped = 5;
    case kSkipped: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_skipped());
      break;
    }
    // string jspb_payload = 7;
    case kJspbPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_jspb_payload());
      break;
    }
    // string text_payload = 8;
    case kTextPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_payload());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConformanceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConformanceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConformanceResponse::GetClassData() const { return &_class_data_; }


void ConformanceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConformanceResponse*>(&to_msg);
  auto& from = static_cast<const ConformanceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:conformance.ConformanceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.result_case()) {
    case kParseError: {
      _this->_internal_set_parse_error(from._internal_parse_error());
      break;
    }
    case kSerializeError: {
      _this->_internal_set_serialize_error(from._internal_serialize_error());
      break;
    }
    case kRuntimeError: {
      _this->_internal_set_runtime_error(from._internal_runtime_error());
      break;
    }
    case kProtobufPayload: {
      _this->_internal_set_protobuf_payload(from._internal_protobuf_payload());
      break;
    }
    case kJsonPayload: {
      _this->_internal_set_json_payload(from._internal_json_payload());
      break;
    }
    case kSkipped: {
      _this->_internal_set_skipped(from._internal_skipped());
      break;
    }
    case kJspbPayload: {
      _this->_internal_set_jspb_payload(from._internal_jspb_payload());
      break;
    }
    case kTextPayload: {
      _this->_internal_set_text_payload(from._internal_text_payload());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConformanceResponse::CopyFrom(const ConformanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:conformance.ConformanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConformanceResponse::IsInitialized() const {
  return true;
}

void ConformanceResponse::InternalSwap(ConformanceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConformanceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conformance_2eproto_getter, &descriptor_table_conformance_2eproto_once,
      file_level_metadata_conformance_2eproto[2]);
}

// ===================================================================

class JspbEncodingConfig::_Internal {
 public:
};

JspbEncodingConfig::JspbEncodingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:conformance.JspbEncodingConfig)
}
JspbEncodingConfig::JspbEncodingConfig(const JspbEncodingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JspbEncodingConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.use_jspb_array_any_format_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.use_jspb_array_any_format_ = from._impl_.use_jspb_array_any_format_;
  // @@protoc_insertion_point(copy_constructor:conformance.JspbEncodingConfig)
}

inline void JspbEncodingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.use_jspb_array_any_format_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JspbEncodingConfig::~JspbEncodingConfig() {
  // @@protoc_insertion_point(destructor:conformance.JspbEncodingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JspbEncodingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JspbEncodingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JspbEncodingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:conformance.JspbEncodingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.use_jspb_array_any_format_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JspbEncodingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool use_jspb_array_any_format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.use_jspb_array_any_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JspbEncodingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:conformance.JspbEncodingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_jspb_array_any_format = 1;
  if (this->_internal_use_jspb_array_any_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_use_jspb_array_any_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:conformance.JspbEncodingConfig)
  return target;
}

size_t JspbEncodingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:conformance.JspbEncodingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool use_jspb_array_any_format = 1;
  if (this->_internal_use_jspb_array_any_format() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JspbEncodingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JspbEncodingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JspbEncodingConfig::GetClassData() const { return &_class_data_; }


void JspbEncodingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JspbEncodingConfig*>(&to_msg);
  auto& from = static_cast<const JspbEncodingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:conformance.JspbEncodingConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_use_jspb_array_any_format() != 0) {
    _this->_internal_set_use_jspb_array_any_format(from._internal_use_jspb_array_any_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JspbEncodingConfig::CopyFrom(const JspbEncodingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:conformance.JspbEncodingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JspbEncodingConfig::IsInitialized() const {
  return true;
}

void JspbEncodingConfig::InternalSwap(JspbEncodingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.use_jspb_array_any_format_, other->_impl_.use_jspb_array_any_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JspbEncodingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conformance_2eproto_getter, &descriptor_table_conformance_2eproto_once,
      file_level_metadata_conformance_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace conformance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::conformance::FailureSet*
Arena::CreateMaybeMessage< ::conformance::FailureSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::conformance::FailureSet >(arena);
}
template<> PROTOBUF_NOINLINE ::conformance::ConformanceRequest*
Arena::CreateMaybeMessage< ::conformance::ConformanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::conformance::ConformanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::conformance::ConformanceResponse*
Arena::CreateMaybeMessage< ::conformance::ConformanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::conformance::ConformanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::conformance::JspbEncodingConfig*
Arena::CreateMaybeMessage< ::conformance::JspbEncodingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::conformance::JspbEncodingConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
