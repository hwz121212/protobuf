// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: conformance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_conformance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_conformance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_conformance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_conformance_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_conformance_2eproto;
namespace conformance {
class ConformanceRequest;
struct ConformanceRequestDefaultTypeInternal;
extern ConformanceRequestDefaultTypeInternal _ConformanceRequest_default_instance_;
class ConformanceResponse;
struct ConformanceResponseDefaultTypeInternal;
extern ConformanceResponseDefaultTypeInternal _ConformanceResponse_default_instance_;
class FailureSet;
struct FailureSetDefaultTypeInternal;
extern FailureSetDefaultTypeInternal _FailureSet_default_instance_;
class JspbEncodingConfig;
struct JspbEncodingConfigDefaultTypeInternal;
extern JspbEncodingConfigDefaultTypeInternal _JspbEncodingConfig_default_instance_;
}  // namespace conformance
PROTOBUF_NAMESPACE_OPEN
template<> ::conformance::ConformanceRequest* Arena::CreateMaybeMessage<::conformance::ConformanceRequest>(Arena*);
template<> ::conformance::ConformanceResponse* Arena::CreateMaybeMessage<::conformance::ConformanceResponse>(Arena*);
template<> ::conformance::FailureSet* Arena::CreateMaybeMessage<::conformance::FailureSet>(Arena*);
template<> ::conformance::JspbEncodingConfig* Arena::CreateMaybeMessage<::conformance::JspbEncodingConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace conformance {

enum WireFormat : int {
  UNSPECIFIED = 0,
  PROTOBUF = 1,
  JSON = 2,
  JSPB = 3,
  TEXT_FORMAT = 4,
  WireFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WireFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WireFormat_IsValid(int value);
constexpr WireFormat WireFormat_MIN = UNSPECIFIED;
constexpr WireFormat WireFormat_MAX = TEXT_FORMAT;
constexpr int WireFormat_ARRAYSIZE = WireFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WireFormat_descriptor();
template<typename T>
inline const std::string& WireFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WireFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WireFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WireFormat_descriptor(), enum_t_value);
}
inline bool WireFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WireFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WireFormat>(
    WireFormat_descriptor(), name, value);
}
enum TestCategory : int {
  UNSPECIFIED_TEST = 0,
  BINARY_TEST = 1,
  JSON_TEST = 2,
  JSON_IGNORE_UNKNOWN_PARSING_TEST = 3,
  JSPB_TEST = 4,
  TEXT_FORMAT_TEST = 5,
  TestCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TestCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TestCategory_IsValid(int value);
constexpr TestCategory TestCategory_MIN = UNSPECIFIED_TEST;
constexpr TestCategory TestCategory_MAX = TEXT_FORMAT_TEST;
constexpr int TestCategory_ARRAYSIZE = TestCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestCategory_descriptor();
template<typename T>
inline const std::string& TestCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestCategory_descriptor(), enum_t_value);
}
inline bool TestCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestCategory>(
    TestCategory_descriptor(), name, value);
}
// ===================================================================

class FailureSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:conformance.FailureSet) */ {
 public:
  inline FailureSet() : FailureSet(nullptr) {}
  ~FailureSet() override;
  explicit PROTOBUF_CONSTEXPR FailureSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FailureSet(const FailureSet& from);
  FailureSet(FailureSet&& from) noexcept
    : FailureSet() {
    *this = ::std::move(from);
  }

  inline FailureSet& operator=(const FailureSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FailureSet& operator=(FailureSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FailureSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FailureSet* internal_default_instance() {
    return reinterpret_cast<const FailureSet*>(
               &_FailureSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FailureSet& a, FailureSet& b) {
    a.Swap(&b);
  }
  inline void Swap(FailureSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FailureSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FailureSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FailureSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FailureSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FailureSet& from) {
    FailureSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FailureSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "conformance.FailureSet";
  }
  protected:
  explicit FailureSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailureFieldNumber = 1,
  };
  // repeated string failure = 1;
  int failure_size() const;
  private:
  int _internal_failure_size() const;
  public:
  void clear_failure();
  const std::string& failure(int index) const;
  std::string* mutable_failure(int index);
  void set_failure(int index, const std::string& value);
  void set_failure(int index, std::string&& value);
  void set_failure(int index, const char* value);
  void set_failure(int index, const char* value, size_t size);
  std::string* add_failure();
  void add_failure(const std::string& value);
  void add_failure(std::string&& value);
  void add_failure(const char* value);
  void add_failure(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failure() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failure();
  private:
  const std::string& _internal_failure(int index) const;
  std::string* _internal_add_failure();
  public:

  // @@protoc_insertion_point(class_scope:conformance.FailureSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failure_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_conformance_2eproto;
};
// -------------------------------------------------------------------

class ConformanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:conformance.ConformanceRequest) */ {
 public:
  inline ConformanceRequest() : ConformanceRequest(nullptr) {}
  ~ConformanceRequest() override;
  explicit PROTOBUF_CONSTEXPR ConformanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConformanceRequest(const ConformanceRequest& from);
  ConformanceRequest(ConformanceRequest&& from) noexcept
    : ConformanceRequest() {
    *this = ::std::move(from);
  }

  inline ConformanceRequest& operator=(const ConformanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConformanceRequest& operator=(ConformanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConformanceRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kProtobufPayload = 1,
    kJsonPayload = 2,
    kJspbPayload = 7,
    kTextPayload = 8,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const ConformanceRequest* internal_default_instance() {
    return reinterpret_cast<const ConformanceRequest*>(
               &_ConformanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConformanceRequest& a, ConformanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConformanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConformanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConformanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConformanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConformanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConformanceRequest& from) {
    ConformanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConformanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "conformance.ConformanceRequest";
  }
  protected:
  explicit ConformanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTypeFieldNumber = 4,
    kJspbEncodingOptionsFieldNumber = 6,
    kRequestedOutputFormatFieldNumber = 3,
    kTestCategoryFieldNumber = 5,
    kPrintUnknownFieldsFieldNumber = 9,
    kProtobufPayloadFieldNumber = 1,
    kJsonPayloadFieldNumber = 2,
    kJspbPayloadFieldNumber = 7,
    kTextPayloadFieldNumber = 8,
  };
  // string message_type = 4;
  void clear_message_type();
  const std::string& message_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_type();
  PROTOBUF_NODISCARD std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // .conformance.JspbEncodingConfig jspb_encoding_options = 6;
  bool has_jspb_encoding_options() const;
  private:
  bool _internal_has_jspb_encoding_options() const;
  public:
  void clear_jspb_encoding_options();
  const ::conformance::JspbEncodingConfig& jspb_encoding_options() const;
  PROTOBUF_NODISCARD ::conformance::JspbEncodingConfig* release_jspb_encoding_options();
  ::conformance::JspbEncodingConfig* mutable_jspb_encoding_options();
  void set_allocated_jspb_encoding_options(::conformance::JspbEncodingConfig* jspb_encoding_options);
  private:
  const ::conformance::JspbEncodingConfig& _internal_jspb_encoding_options() const;
  ::conformance::JspbEncodingConfig* _internal_mutable_jspb_encoding_options();
  public:
  void unsafe_arena_set_allocated_jspb_encoding_options(
      ::conformance::JspbEncodingConfig* jspb_encoding_options);
  ::conformance::JspbEncodingConfig* unsafe_arena_release_jspb_encoding_options();

  // .conformance.WireFormat requested_output_format = 3;
  void clear_requested_output_format();
  ::conformance::WireFormat requested_output_format() const;
  void set_requested_output_format(::conformance::WireFormat value);
  private:
  ::conformance::WireFormat _internal_requested_output_format() const;
  void _internal_set_requested_output_format(::conformance::WireFormat value);
  public:

  // .conformance.TestCategory test_category = 5;
  void clear_test_category();
  ::conformance::TestCategory test_category() const;
  void set_test_category(::conformance::TestCategory value);
  private:
  ::conformance::TestCategory _internal_test_category() const;
  void _internal_set_test_category(::conformance::TestCategory value);
  public:

  // bool print_unknown_fields = 9;
  void clear_print_unknown_fields();
  bool print_unknown_fields() const;
  void set_print_unknown_fields(bool value);
  private:
  bool _internal_print_unknown_fields() const;
  void _internal_set_print_unknown_fields(bool value);
  public:

  // bytes protobuf_payload = 1;
  bool has_protobuf_payload() const;
  private:
  bool _internal_has_protobuf_payload() const;
  public:
  void clear_protobuf_payload();
  const std::string& protobuf_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protobuf_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protobuf_payload();
  PROTOBUF_NODISCARD std::string* release_protobuf_payload();
  void set_allocated_protobuf_payload(std::string* protobuf_payload);
  private:
  const std::string& _internal_protobuf_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protobuf_payload(const std::string& value);
  std::string* _internal_mutable_protobuf_payload();
  public:

  // string json_payload = 2;
  bool has_json_payload() const;
  private:
  bool _internal_has_json_payload() const;
  public:
  void clear_json_payload();
  const std::string& json_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_payload();
  PROTOBUF_NODISCARD std::string* release_json_payload();
  void set_allocated_json_payload(std::string* json_payload);
  private:
  const std::string& _internal_json_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_payload(const std::string& value);
  std::string* _internal_mutable_json_payload();
  public:

  // string jspb_payload = 7;
  bool has_jspb_payload() const;
  private:
  bool _internal_has_jspb_payload() const;
  public:
  void clear_jspb_payload();
  const std::string& jspb_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jspb_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jspb_payload();
  PROTOBUF_NODISCARD std::string* release_jspb_payload();
  void set_allocated_jspb_payload(std::string* jspb_payload);
  private:
  const std::string& _internal_jspb_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jspb_payload(const std::string& value);
  std::string* _internal_mutable_jspb_payload();
  public:

  // string text_payload = 8;
  bool has_text_payload() const;
  private:
  bool _internal_has_text_payload() const;
  public:
  void clear_text_payload();
  const std::string& text_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_payload();
  PROTOBUF_NODISCARD std::string* release_text_payload();
  void set_allocated_text_payload(std::string* text_payload);
  private:
  const std::string& _internal_text_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_payload(const std::string& value);
  std::string* _internal_mutable_text_payload();
  public:

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:conformance.ConformanceRequest)
 private:
  class _Internal;
  void set_has_protobuf_payload();
  void set_has_json_payload();
  void set_has_jspb_payload();
  void set_has_text_payload();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
    ::conformance::JspbEncodingConfig* jspb_encoding_options_;
    int requested_output_format_;
    int test_category_;
    bool print_unknown_fields_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protobuf_payload_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_payload_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jspb_payload_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_payload_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_conformance_2eproto;
};
// -------------------------------------------------------------------

class ConformanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:conformance.ConformanceResponse) */ {
 public:
  inline ConformanceResponse() : ConformanceResponse(nullptr) {}
  ~ConformanceResponse() override;
  explicit PROTOBUF_CONSTEXPR ConformanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConformanceResponse(const ConformanceResponse& from);
  ConformanceResponse(ConformanceResponse&& from) noexcept
    : ConformanceResponse() {
    *this = ::std::move(from);
  }

  inline ConformanceResponse& operator=(const ConformanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConformanceResponse& operator=(ConformanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConformanceResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kParseError = 1,
    kSerializeError = 6,
    kRuntimeError = 2,
    kProtobufPayload = 3,
    kJsonPayload = 4,
    kSkipped = 5,
    kJspbPayload = 7,
    kTextPayload = 8,
    RESULT_NOT_SET = 0,
  };

  static inline const ConformanceResponse* internal_default_instance() {
    return reinterpret_cast<const ConformanceResponse*>(
               &_ConformanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConformanceResponse& a, ConformanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConformanceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConformanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConformanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConformanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConformanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConformanceResponse& from) {
    ConformanceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConformanceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "conformance.ConformanceResponse";
  }
  protected:
  explicit ConformanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParseErrorFieldNumber = 1,
    kSerializeErrorFieldNumber = 6,
    kRuntimeErrorFieldNumber = 2,
    kProtobufPayloadFieldNumber = 3,
    kJsonPayloadFieldNumber = 4,
    kSkippedFieldNumber = 5,
    kJspbPayloadFieldNumber = 7,
    kTextPayloadFieldNumber = 8,
  };
  // string parse_error = 1;
  bool has_parse_error() const;
  private:
  bool _internal_has_parse_error() const;
  public:
  void clear_parse_error();
  const std::string& parse_error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parse_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parse_error();
  PROTOBUF_NODISCARD std::string* release_parse_error();
  void set_allocated_parse_error(std::string* parse_error);
  private:
  const std::string& _internal_parse_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parse_error(const std::string& value);
  std::string* _internal_mutable_parse_error();
  public:

  // string serialize_error = 6;
  bool has_serialize_error() const;
  private:
  bool _internal_has_serialize_error() const;
  public:
  void clear_serialize_error();
  const std::string& serialize_error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialize_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialize_error();
  PROTOBUF_NODISCARD std::string* release_serialize_error();
  void set_allocated_serialize_error(std::string* serialize_error);
  private:
  const std::string& _internal_serialize_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialize_error(const std::string& value);
  std::string* _internal_mutable_serialize_error();
  public:

  // string runtime_error = 2;
  bool has_runtime_error() const;
  private:
  bool _internal_has_runtime_error() const;
  public:
  void clear_runtime_error();
  const std::string& runtime_error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_error();
  PROTOBUF_NODISCARD std::string* release_runtime_error();
  void set_allocated_runtime_error(std::string* runtime_error);
  private:
  const std::string& _internal_runtime_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_error(const std::string& value);
  std::string* _internal_mutable_runtime_error();
  public:

  // bytes protobuf_payload = 3;
  bool has_protobuf_payload() const;
  private:
  bool _internal_has_protobuf_payload() const;
  public:
  void clear_protobuf_payload();
  const std::string& protobuf_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protobuf_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protobuf_payload();
  PROTOBUF_NODISCARD std::string* release_protobuf_payload();
  void set_allocated_protobuf_payload(std::string* protobuf_payload);
  private:
  const std::string& _internal_protobuf_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protobuf_payload(const std::string& value);
  std::string* _internal_mutable_protobuf_payload();
  public:

  // string json_payload = 4;
  bool has_json_payload() const;
  private:
  bool _internal_has_json_payload() const;
  public:
  void clear_json_payload();
  const std::string& json_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_payload();
  PROTOBUF_NODISCARD std::string* release_json_payload();
  void set_allocated_json_payload(std::string* json_payload);
  private:
  const std::string& _internal_json_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_payload(const std::string& value);
  std::string* _internal_mutable_json_payload();
  public:

  // string skipped = 5;
  bool has_skipped() const;
  private:
  bool _internal_has_skipped() const;
  public:
  void clear_skipped();
  const std::string& skipped() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skipped(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skipped();
  PROTOBUF_NODISCARD std::string* release_skipped();
  void set_allocated_skipped(std::string* skipped);
  private:
  const std::string& _internal_skipped() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skipped(const std::string& value);
  std::string* _internal_mutable_skipped();
  public:

  // string jspb_payload = 7;
  bool has_jspb_payload() const;
  private:
  bool _internal_has_jspb_payload() const;
  public:
  void clear_jspb_payload();
  const std::string& jspb_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jspb_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jspb_payload();
  PROTOBUF_NODISCARD std::string* release_jspb_payload();
  void set_allocated_jspb_payload(std::string* jspb_payload);
  private:
  const std::string& _internal_jspb_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jspb_payload(const std::string& value);
  std::string* _internal_mutable_jspb_payload();
  public:

  // string text_payload = 8;
  bool has_text_payload() const;
  private:
  bool _internal_has_text_payload() const;
  public:
  void clear_text_payload();
  const std::string& text_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_payload();
  PROTOBUF_NODISCARD std::string* release_text_payload();
  void set_allocated_text_payload(std::string* text_payload);
  private:
  const std::string& _internal_text_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_payload(const std::string& value);
  std::string* _internal_mutable_text_payload();
  public:

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:conformance.ConformanceResponse)
 private:
  class _Internal;
  void set_has_parse_error();
  void set_has_serialize_error();
  void set_has_runtime_error();
  void set_has_protobuf_payload();
  void set_has_json_payload();
  void set_has_skipped();
  void set_has_jspb_payload();
  void set_has_text_payload();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ResultUnion {
      constexpr ResultUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parse_error_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialize_error_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_error_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protobuf_payload_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_payload_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skipped_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jspb_payload_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_payload_;
    } result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_conformance_2eproto;
};
// -------------------------------------------------------------------

class JspbEncodingConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:conformance.JspbEncodingConfig) */ {
 public:
  inline JspbEncodingConfig() : JspbEncodingConfig(nullptr) {}
  ~JspbEncodingConfig() override;
  explicit PROTOBUF_CONSTEXPR JspbEncodingConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JspbEncodingConfig(const JspbEncodingConfig& from);
  JspbEncodingConfig(JspbEncodingConfig&& from) noexcept
    : JspbEncodingConfig() {
    *this = ::std::move(from);
  }

  inline JspbEncodingConfig& operator=(const JspbEncodingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline JspbEncodingConfig& operator=(JspbEncodingConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JspbEncodingConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const JspbEncodingConfig* internal_default_instance() {
    return reinterpret_cast<const JspbEncodingConfig*>(
               &_JspbEncodingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JspbEncodingConfig& a, JspbEncodingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(JspbEncodingConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JspbEncodingConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JspbEncodingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JspbEncodingConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JspbEncodingConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JspbEncodingConfig& from) {
    JspbEncodingConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JspbEncodingConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "conformance.JspbEncodingConfig";
  }
  protected:
  explicit JspbEncodingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseJspbArrayAnyFormatFieldNumber = 1,
  };
  // bool use_jspb_array_any_format = 1;
  void clear_use_jspb_array_any_format();
  bool use_jspb_array_any_format() const;
  void set_use_jspb_array_any_format(bool value);
  private:
  bool _internal_use_jspb_array_any_format() const;
  void _internal_set_use_jspb_array_any_format(bool value);
  public:

  // @@protoc_insertion_point(class_scope:conformance.JspbEncodingConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool use_jspb_array_any_format_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_conformance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FailureSet

// repeated string failure = 1;
inline int FailureSet::_internal_failure_size() const {
  return _impl_.failure_.size();
}
inline int FailureSet::failure_size() const {
  return _internal_failure_size();
}
inline void FailureSet::clear_failure() {
  _impl_.failure_.Clear();
}
inline std::string* FailureSet::add_failure() {
  std::string* _s = _internal_add_failure();
  // @@protoc_insertion_point(field_add_mutable:conformance.FailureSet.failure)
  return _s;
}
inline const std::string& FailureSet::_internal_failure(int index) const {
  return _impl_.failure_.Get(index);
}
inline const std::string& FailureSet::failure(int index) const {
  // @@protoc_insertion_point(field_get:conformance.FailureSet.failure)
  return _internal_failure(index);
}
inline std::string* FailureSet::mutable_failure(int index) {
  // @@protoc_insertion_point(field_mutable:conformance.FailureSet.failure)
  return _impl_.failure_.Mutable(index);
}
inline void FailureSet::set_failure(int index, const std::string& value) {
  _impl_.failure_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:conformance.FailureSet.failure)
}
inline void FailureSet::set_failure(int index, std::string&& value) {
  _impl_.failure_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:conformance.FailureSet.failure)
}
inline void FailureSet::set_failure(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failure_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:conformance.FailureSet.failure)
}
inline void FailureSet::set_failure(int index, const char* value, size_t size) {
  _impl_.failure_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:conformance.FailureSet.failure)
}
inline std::string* FailureSet::_internal_add_failure() {
  return _impl_.failure_.Add();
}
inline void FailureSet::add_failure(const std::string& value) {
  _impl_.failure_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:conformance.FailureSet.failure)
}
inline void FailureSet::add_failure(std::string&& value) {
  _impl_.failure_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:conformance.FailureSet.failure)
}
inline void FailureSet::add_failure(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failure_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:conformance.FailureSet.failure)
}
inline void FailureSet::add_failure(const char* value, size_t size) {
  _impl_.failure_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:conformance.FailureSet.failure)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FailureSet::failure() const {
  // @@protoc_insertion_point(field_list:conformance.FailureSet.failure)
  return _impl_.failure_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FailureSet::mutable_failure() {
  // @@protoc_insertion_point(field_mutable_list:conformance.FailureSet.failure)
  return &_impl_.failure_;
}

// -------------------------------------------------------------------

// ConformanceRequest

// bytes protobuf_payload = 1;
inline bool ConformanceRequest::_internal_has_protobuf_payload() const {
  return payload_case() == kProtobufPayload;
}
inline bool ConformanceRequest::has_protobuf_payload() const {
  return _internal_has_protobuf_payload();
}
inline void ConformanceRequest::set_has_protobuf_payload() {
  _impl_._oneof_case_[0] = kProtobufPayload;
}
inline void ConformanceRequest::clear_protobuf_payload() {
  if (_internal_has_protobuf_payload()) {
    _impl_.payload_.protobuf_payload_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& ConformanceRequest::protobuf_payload() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceRequest.protobuf_payload)
  return _internal_protobuf_payload();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceRequest::set_protobuf_payload(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_protobuf_payload()) {
    clear_payload();
    set_has_protobuf_payload();
    _impl_.payload_.protobuf_payload_.InitDefault();
  }
  _impl_.payload_.protobuf_payload_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceRequest.protobuf_payload)
}
inline std::string* ConformanceRequest::mutable_protobuf_payload() {
  std::string* _s = _internal_mutable_protobuf_payload();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceRequest.protobuf_payload)
  return _s;
}
inline const std::string& ConformanceRequest::_internal_protobuf_payload() const {
  if (_internal_has_protobuf_payload()) {
    return _impl_.payload_.protobuf_payload_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceRequest::_internal_set_protobuf_payload(const std::string& value) {
  if (!_internal_has_protobuf_payload()) {
    clear_payload();
    set_has_protobuf_payload();
    _impl_.payload_.protobuf_payload_.InitDefault();
  }
  _impl_.payload_.protobuf_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceRequest::_internal_mutable_protobuf_payload() {
  if (!_internal_has_protobuf_payload()) {
    clear_payload();
    set_has_protobuf_payload();
    _impl_.payload_.protobuf_payload_.InitDefault();
  }
  return _impl_.payload_.protobuf_payload_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceRequest::release_protobuf_payload() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceRequest.protobuf_payload)
  if (_internal_has_protobuf_payload()) {
    clear_has_payload();
    return _impl_.payload_.protobuf_payload_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceRequest::set_allocated_protobuf_payload(std::string* protobuf_payload) {
  if (has_payload()) {
    clear_payload();
  }
  if (protobuf_payload != nullptr) {
    set_has_protobuf_payload();
    _impl_.payload_.protobuf_payload_.InitAllocated(protobuf_payload, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceRequest.protobuf_payload)
}

// string json_payload = 2;
inline bool ConformanceRequest::_internal_has_json_payload() const {
  return payload_case() == kJsonPayload;
}
inline bool ConformanceRequest::has_json_payload() const {
  return _internal_has_json_payload();
}
inline void ConformanceRequest::set_has_json_payload() {
  _impl_._oneof_case_[0] = kJsonPayload;
}
inline void ConformanceRequest::clear_json_payload() {
  if (_internal_has_json_payload()) {
    _impl_.payload_.json_payload_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& ConformanceRequest::json_payload() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceRequest.json_payload)
  return _internal_json_payload();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceRequest::set_json_payload(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_json_payload()) {
    clear_payload();
    set_has_json_payload();
    _impl_.payload_.json_payload_.InitDefault();
  }
  _impl_.payload_.json_payload_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceRequest.json_payload)
}
inline std::string* ConformanceRequest::mutable_json_payload() {
  std::string* _s = _internal_mutable_json_payload();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceRequest.json_payload)
  return _s;
}
inline const std::string& ConformanceRequest::_internal_json_payload() const {
  if (_internal_has_json_payload()) {
    return _impl_.payload_.json_payload_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceRequest::_internal_set_json_payload(const std::string& value) {
  if (!_internal_has_json_payload()) {
    clear_payload();
    set_has_json_payload();
    _impl_.payload_.json_payload_.InitDefault();
  }
  _impl_.payload_.json_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceRequest::_internal_mutable_json_payload() {
  if (!_internal_has_json_payload()) {
    clear_payload();
    set_has_json_payload();
    _impl_.payload_.json_payload_.InitDefault();
  }
  return _impl_.payload_.json_payload_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceRequest::release_json_payload() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceRequest.json_payload)
  if (_internal_has_json_payload()) {
    clear_has_payload();
    return _impl_.payload_.json_payload_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceRequest::set_allocated_json_payload(std::string* json_payload) {
  if (has_payload()) {
    clear_payload();
  }
  if (json_payload != nullptr) {
    set_has_json_payload();
    _impl_.payload_.json_payload_.InitAllocated(json_payload, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceRequest.json_payload)
}

// string jspb_payload = 7;
inline bool ConformanceRequest::_internal_has_jspb_payload() const {
  return payload_case() == kJspbPayload;
}
inline bool ConformanceRequest::has_jspb_payload() const {
  return _internal_has_jspb_payload();
}
inline void ConformanceRequest::set_has_jspb_payload() {
  _impl_._oneof_case_[0] = kJspbPayload;
}
inline void ConformanceRequest::clear_jspb_payload() {
  if (_internal_has_jspb_payload()) {
    _impl_.payload_.jspb_payload_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& ConformanceRequest::jspb_payload() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceRequest.jspb_payload)
  return _internal_jspb_payload();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceRequest::set_jspb_payload(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_jspb_payload()) {
    clear_payload();
    set_has_jspb_payload();
    _impl_.payload_.jspb_payload_.InitDefault();
  }
  _impl_.payload_.jspb_payload_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceRequest.jspb_payload)
}
inline std::string* ConformanceRequest::mutable_jspb_payload() {
  std::string* _s = _internal_mutable_jspb_payload();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceRequest.jspb_payload)
  return _s;
}
inline const std::string& ConformanceRequest::_internal_jspb_payload() const {
  if (_internal_has_jspb_payload()) {
    return _impl_.payload_.jspb_payload_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceRequest::_internal_set_jspb_payload(const std::string& value) {
  if (!_internal_has_jspb_payload()) {
    clear_payload();
    set_has_jspb_payload();
    _impl_.payload_.jspb_payload_.InitDefault();
  }
  _impl_.payload_.jspb_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceRequest::_internal_mutable_jspb_payload() {
  if (!_internal_has_jspb_payload()) {
    clear_payload();
    set_has_jspb_payload();
    _impl_.payload_.jspb_payload_.InitDefault();
  }
  return _impl_.payload_.jspb_payload_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceRequest::release_jspb_payload() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceRequest.jspb_payload)
  if (_internal_has_jspb_payload()) {
    clear_has_payload();
    return _impl_.payload_.jspb_payload_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceRequest::set_allocated_jspb_payload(std::string* jspb_payload) {
  if (has_payload()) {
    clear_payload();
  }
  if (jspb_payload != nullptr) {
    set_has_jspb_payload();
    _impl_.payload_.jspb_payload_.InitAllocated(jspb_payload, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceRequest.jspb_payload)
}

// string text_payload = 8;
inline bool ConformanceRequest::_internal_has_text_payload() const {
  return payload_case() == kTextPayload;
}
inline bool ConformanceRequest::has_text_payload() const {
  return _internal_has_text_payload();
}
inline void ConformanceRequest::set_has_text_payload() {
  _impl_._oneof_case_[0] = kTextPayload;
}
inline void ConformanceRequest::clear_text_payload() {
  if (_internal_has_text_payload()) {
    _impl_.payload_.text_payload_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& ConformanceRequest::text_payload() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceRequest.text_payload)
  return _internal_text_payload();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceRequest::set_text_payload(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    _impl_.payload_.text_payload_.InitDefault();
  }
  _impl_.payload_.text_payload_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceRequest.text_payload)
}
inline std::string* ConformanceRequest::mutable_text_payload() {
  std::string* _s = _internal_mutable_text_payload();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceRequest.text_payload)
  return _s;
}
inline const std::string& ConformanceRequest::_internal_text_payload() const {
  if (_internal_has_text_payload()) {
    return _impl_.payload_.text_payload_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceRequest::_internal_set_text_payload(const std::string& value) {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    _impl_.payload_.text_payload_.InitDefault();
  }
  _impl_.payload_.text_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceRequest::_internal_mutable_text_payload() {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    _impl_.payload_.text_payload_.InitDefault();
  }
  return _impl_.payload_.text_payload_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceRequest::release_text_payload() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceRequest.text_payload)
  if (_internal_has_text_payload()) {
    clear_has_payload();
    return _impl_.payload_.text_payload_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceRequest::set_allocated_text_payload(std::string* text_payload) {
  if (has_payload()) {
    clear_payload();
  }
  if (text_payload != nullptr) {
    set_has_text_payload();
    _impl_.payload_.text_payload_.InitAllocated(text_payload, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceRequest.text_payload)
}

// .conformance.WireFormat requested_output_format = 3;
inline void ConformanceRequest::clear_requested_output_format() {
  _impl_.requested_output_format_ = 0;
}
inline ::conformance::WireFormat ConformanceRequest::_internal_requested_output_format() const {
  return static_cast< ::conformance::WireFormat >(_impl_.requested_output_format_);
}
inline ::conformance::WireFormat ConformanceRequest::requested_output_format() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceRequest.requested_output_format)
  return _internal_requested_output_format();
}
inline void ConformanceRequest::_internal_set_requested_output_format(::conformance::WireFormat value) {
  
  _impl_.requested_output_format_ = value;
}
inline void ConformanceRequest::set_requested_output_format(::conformance::WireFormat value) {
  _internal_set_requested_output_format(value);
  // @@protoc_insertion_point(field_set:conformance.ConformanceRequest.requested_output_format)
}

// string message_type = 4;
inline void ConformanceRequest::clear_message_type() {
  _impl_.message_type_.ClearToEmpty();
}
inline const std::string& ConformanceRequest::message_type() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceRequest.message_type)
  return _internal_message_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConformanceRequest::set_message_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceRequest.message_type)
}
inline std::string* ConformanceRequest::mutable_message_type() {
  std::string* _s = _internal_mutable_message_type();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceRequest.message_type)
  return _s;
}
inline const std::string& ConformanceRequest::_internal_message_type() const {
  return _impl_.message_type_.Get();
}
inline void ConformanceRequest::_internal_set_message_type(const std::string& value) {
  
  _impl_.message_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceRequest::_internal_mutable_message_type() {
  
  return _impl_.message_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ConformanceRequest::release_message_type() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceRequest.message_type)
  return _impl_.message_type_.Release();
}
inline void ConformanceRequest::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  _impl_.message_type_.SetAllocated(message_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_type_.IsDefault()) {
    _impl_.message_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceRequest.message_type)
}

// .conformance.TestCategory test_category = 5;
inline void ConformanceRequest::clear_test_category() {
  _impl_.test_category_ = 0;
}
inline ::conformance::TestCategory ConformanceRequest::_internal_test_category() const {
  return static_cast< ::conformance::TestCategory >(_impl_.test_category_);
}
inline ::conformance::TestCategory ConformanceRequest::test_category() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceRequest.test_category)
  return _internal_test_category();
}
inline void ConformanceRequest::_internal_set_test_category(::conformance::TestCategory value) {
  
  _impl_.test_category_ = value;
}
inline void ConformanceRequest::set_test_category(::conformance::TestCategory value) {
  _internal_set_test_category(value);
  // @@protoc_insertion_point(field_set:conformance.ConformanceRequest.test_category)
}

// .conformance.JspbEncodingConfig jspb_encoding_options = 6;
inline bool ConformanceRequest::_internal_has_jspb_encoding_options() const {
  return this != internal_default_instance() && _impl_.jspb_encoding_options_ != nullptr;
}
inline bool ConformanceRequest::has_jspb_encoding_options() const {
  return _internal_has_jspb_encoding_options();
}
inline void ConformanceRequest::clear_jspb_encoding_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.jspb_encoding_options_ != nullptr) {
    delete _impl_.jspb_encoding_options_;
  }
  _impl_.jspb_encoding_options_ = nullptr;
}
inline const ::conformance::JspbEncodingConfig& ConformanceRequest::_internal_jspb_encoding_options() const {
  const ::conformance::JspbEncodingConfig* p = _impl_.jspb_encoding_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::conformance::JspbEncodingConfig&>(
      ::conformance::_JspbEncodingConfig_default_instance_);
}
inline const ::conformance::JspbEncodingConfig& ConformanceRequest::jspb_encoding_options() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceRequest.jspb_encoding_options)
  return _internal_jspb_encoding_options();
}
inline void ConformanceRequest::unsafe_arena_set_allocated_jspb_encoding_options(
    ::conformance::JspbEncodingConfig* jspb_encoding_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jspb_encoding_options_);
  }
  _impl_.jspb_encoding_options_ = jspb_encoding_options;
  if (jspb_encoding_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:conformance.ConformanceRequest.jspb_encoding_options)
}
inline ::conformance::JspbEncodingConfig* ConformanceRequest::release_jspb_encoding_options() {
  
  ::conformance::JspbEncodingConfig* temp = _impl_.jspb_encoding_options_;
  _impl_.jspb_encoding_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::conformance::JspbEncodingConfig* ConformanceRequest::unsafe_arena_release_jspb_encoding_options() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceRequest.jspb_encoding_options)
  
  ::conformance::JspbEncodingConfig* temp = _impl_.jspb_encoding_options_;
  _impl_.jspb_encoding_options_ = nullptr;
  return temp;
}
inline ::conformance::JspbEncodingConfig* ConformanceRequest::_internal_mutable_jspb_encoding_options() {
  
  if (_impl_.jspb_encoding_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::conformance::JspbEncodingConfig>(GetArenaForAllocation());
    _impl_.jspb_encoding_options_ = p;
  }
  return _impl_.jspb_encoding_options_;
}
inline ::conformance::JspbEncodingConfig* ConformanceRequest::mutable_jspb_encoding_options() {
  ::conformance::JspbEncodingConfig* _msg = _internal_mutable_jspb_encoding_options();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceRequest.jspb_encoding_options)
  return _msg;
}
inline void ConformanceRequest::set_allocated_jspb_encoding_options(::conformance::JspbEncodingConfig* jspb_encoding_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.jspb_encoding_options_;
  }
  if (jspb_encoding_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(jspb_encoding_options);
    if (message_arena != submessage_arena) {
      jspb_encoding_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jspb_encoding_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.jspb_encoding_options_ = jspb_encoding_options;
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceRequest.jspb_encoding_options)
}

// bool print_unknown_fields = 9;
inline void ConformanceRequest::clear_print_unknown_fields() {
  _impl_.print_unknown_fields_ = false;
}
inline bool ConformanceRequest::_internal_print_unknown_fields() const {
  return _impl_.print_unknown_fields_;
}
inline bool ConformanceRequest::print_unknown_fields() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceRequest.print_unknown_fields)
  return _internal_print_unknown_fields();
}
inline void ConformanceRequest::_internal_set_print_unknown_fields(bool value) {
  
  _impl_.print_unknown_fields_ = value;
}
inline void ConformanceRequest::set_print_unknown_fields(bool value) {
  _internal_set_print_unknown_fields(value);
  // @@protoc_insertion_point(field_set:conformance.ConformanceRequest.print_unknown_fields)
}

inline bool ConformanceRequest::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void ConformanceRequest::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline ConformanceRequest::PayloadCase ConformanceRequest::payload_case() const {
  return ConformanceRequest::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConformanceResponse

// string parse_error = 1;
inline bool ConformanceResponse::_internal_has_parse_error() const {
  return result_case() == kParseError;
}
inline bool ConformanceResponse::has_parse_error() const {
  return _internal_has_parse_error();
}
inline void ConformanceResponse::set_has_parse_error() {
  _impl_._oneof_case_[0] = kParseError;
}
inline void ConformanceResponse::clear_parse_error() {
  if (_internal_has_parse_error()) {
    _impl_.result_.parse_error_.Destroy();
    clear_has_result();
  }
}
inline const std::string& ConformanceResponse::parse_error() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceResponse.parse_error)
  return _internal_parse_error();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceResponse::set_parse_error(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_parse_error()) {
    clear_result();
    set_has_parse_error();
    _impl_.result_.parse_error_.InitDefault();
  }
  _impl_.result_.parse_error_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceResponse.parse_error)
}
inline std::string* ConformanceResponse::mutable_parse_error() {
  std::string* _s = _internal_mutable_parse_error();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceResponse.parse_error)
  return _s;
}
inline const std::string& ConformanceResponse::_internal_parse_error() const {
  if (_internal_has_parse_error()) {
    return _impl_.result_.parse_error_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceResponse::_internal_set_parse_error(const std::string& value) {
  if (!_internal_has_parse_error()) {
    clear_result();
    set_has_parse_error();
    _impl_.result_.parse_error_.InitDefault();
  }
  _impl_.result_.parse_error_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceResponse::_internal_mutable_parse_error() {
  if (!_internal_has_parse_error()) {
    clear_result();
    set_has_parse_error();
    _impl_.result_.parse_error_.InitDefault();
  }
  return _impl_.result_.parse_error_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceResponse::release_parse_error() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceResponse.parse_error)
  if (_internal_has_parse_error()) {
    clear_has_result();
    return _impl_.result_.parse_error_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceResponse::set_allocated_parse_error(std::string* parse_error) {
  if (has_result()) {
    clear_result();
  }
  if (parse_error != nullptr) {
    set_has_parse_error();
    _impl_.result_.parse_error_.InitAllocated(parse_error, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceResponse.parse_error)
}

// string serialize_error = 6;
inline bool ConformanceResponse::_internal_has_serialize_error() const {
  return result_case() == kSerializeError;
}
inline bool ConformanceResponse::has_serialize_error() const {
  return _internal_has_serialize_error();
}
inline void ConformanceResponse::set_has_serialize_error() {
  _impl_._oneof_case_[0] = kSerializeError;
}
inline void ConformanceResponse::clear_serialize_error() {
  if (_internal_has_serialize_error()) {
    _impl_.result_.serialize_error_.Destroy();
    clear_has_result();
  }
}
inline const std::string& ConformanceResponse::serialize_error() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceResponse.serialize_error)
  return _internal_serialize_error();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceResponse::set_serialize_error(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_serialize_error()) {
    clear_result();
    set_has_serialize_error();
    _impl_.result_.serialize_error_.InitDefault();
  }
  _impl_.result_.serialize_error_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceResponse.serialize_error)
}
inline std::string* ConformanceResponse::mutable_serialize_error() {
  std::string* _s = _internal_mutable_serialize_error();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceResponse.serialize_error)
  return _s;
}
inline const std::string& ConformanceResponse::_internal_serialize_error() const {
  if (_internal_has_serialize_error()) {
    return _impl_.result_.serialize_error_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceResponse::_internal_set_serialize_error(const std::string& value) {
  if (!_internal_has_serialize_error()) {
    clear_result();
    set_has_serialize_error();
    _impl_.result_.serialize_error_.InitDefault();
  }
  _impl_.result_.serialize_error_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceResponse::_internal_mutable_serialize_error() {
  if (!_internal_has_serialize_error()) {
    clear_result();
    set_has_serialize_error();
    _impl_.result_.serialize_error_.InitDefault();
  }
  return _impl_.result_.serialize_error_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceResponse::release_serialize_error() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceResponse.serialize_error)
  if (_internal_has_serialize_error()) {
    clear_has_result();
    return _impl_.result_.serialize_error_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceResponse::set_allocated_serialize_error(std::string* serialize_error) {
  if (has_result()) {
    clear_result();
  }
  if (serialize_error != nullptr) {
    set_has_serialize_error();
    _impl_.result_.serialize_error_.InitAllocated(serialize_error, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceResponse.serialize_error)
}

// string runtime_error = 2;
inline bool ConformanceResponse::_internal_has_runtime_error() const {
  return result_case() == kRuntimeError;
}
inline bool ConformanceResponse::has_runtime_error() const {
  return _internal_has_runtime_error();
}
inline void ConformanceResponse::set_has_runtime_error() {
  _impl_._oneof_case_[0] = kRuntimeError;
}
inline void ConformanceResponse::clear_runtime_error() {
  if (_internal_has_runtime_error()) {
    _impl_.result_.runtime_error_.Destroy();
    clear_has_result();
  }
}
inline const std::string& ConformanceResponse::runtime_error() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceResponse.runtime_error)
  return _internal_runtime_error();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceResponse::set_runtime_error(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_runtime_error()) {
    clear_result();
    set_has_runtime_error();
    _impl_.result_.runtime_error_.InitDefault();
  }
  _impl_.result_.runtime_error_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceResponse.runtime_error)
}
inline std::string* ConformanceResponse::mutable_runtime_error() {
  std::string* _s = _internal_mutable_runtime_error();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceResponse.runtime_error)
  return _s;
}
inline const std::string& ConformanceResponse::_internal_runtime_error() const {
  if (_internal_has_runtime_error()) {
    return _impl_.result_.runtime_error_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceResponse::_internal_set_runtime_error(const std::string& value) {
  if (!_internal_has_runtime_error()) {
    clear_result();
    set_has_runtime_error();
    _impl_.result_.runtime_error_.InitDefault();
  }
  _impl_.result_.runtime_error_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceResponse::_internal_mutable_runtime_error() {
  if (!_internal_has_runtime_error()) {
    clear_result();
    set_has_runtime_error();
    _impl_.result_.runtime_error_.InitDefault();
  }
  return _impl_.result_.runtime_error_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceResponse::release_runtime_error() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceResponse.runtime_error)
  if (_internal_has_runtime_error()) {
    clear_has_result();
    return _impl_.result_.runtime_error_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceResponse::set_allocated_runtime_error(std::string* runtime_error) {
  if (has_result()) {
    clear_result();
  }
  if (runtime_error != nullptr) {
    set_has_runtime_error();
    _impl_.result_.runtime_error_.InitAllocated(runtime_error, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceResponse.runtime_error)
}

// bytes protobuf_payload = 3;
inline bool ConformanceResponse::_internal_has_protobuf_payload() const {
  return result_case() == kProtobufPayload;
}
inline bool ConformanceResponse::has_protobuf_payload() const {
  return _internal_has_protobuf_payload();
}
inline void ConformanceResponse::set_has_protobuf_payload() {
  _impl_._oneof_case_[0] = kProtobufPayload;
}
inline void ConformanceResponse::clear_protobuf_payload() {
  if (_internal_has_protobuf_payload()) {
    _impl_.result_.protobuf_payload_.Destroy();
    clear_has_result();
  }
}
inline const std::string& ConformanceResponse::protobuf_payload() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceResponse.protobuf_payload)
  return _internal_protobuf_payload();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceResponse::set_protobuf_payload(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_protobuf_payload()) {
    clear_result();
    set_has_protobuf_payload();
    _impl_.result_.protobuf_payload_.InitDefault();
  }
  _impl_.result_.protobuf_payload_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceResponse.protobuf_payload)
}
inline std::string* ConformanceResponse::mutable_protobuf_payload() {
  std::string* _s = _internal_mutable_protobuf_payload();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceResponse.protobuf_payload)
  return _s;
}
inline const std::string& ConformanceResponse::_internal_protobuf_payload() const {
  if (_internal_has_protobuf_payload()) {
    return _impl_.result_.protobuf_payload_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceResponse::_internal_set_protobuf_payload(const std::string& value) {
  if (!_internal_has_protobuf_payload()) {
    clear_result();
    set_has_protobuf_payload();
    _impl_.result_.protobuf_payload_.InitDefault();
  }
  _impl_.result_.protobuf_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceResponse::_internal_mutable_protobuf_payload() {
  if (!_internal_has_protobuf_payload()) {
    clear_result();
    set_has_protobuf_payload();
    _impl_.result_.protobuf_payload_.InitDefault();
  }
  return _impl_.result_.protobuf_payload_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceResponse::release_protobuf_payload() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceResponse.protobuf_payload)
  if (_internal_has_protobuf_payload()) {
    clear_has_result();
    return _impl_.result_.protobuf_payload_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceResponse::set_allocated_protobuf_payload(std::string* protobuf_payload) {
  if (has_result()) {
    clear_result();
  }
  if (protobuf_payload != nullptr) {
    set_has_protobuf_payload();
    _impl_.result_.protobuf_payload_.InitAllocated(protobuf_payload, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceResponse.protobuf_payload)
}

// string json_payload = 4;
inline bool ConformanceResponse::_internal_has_json_payload() const {
  return result_case() == kJsonPayload;
}
inline bool ConformanceResponse::has_json_payload() const {
  return _internal_has_json_payload();
}
inline void ConformanceResponse::set_has_json_payload() {
  _impl_._oneof_case_[0] = kJsonPayload;
}
inline void ConformanceResponse::clear_json_payload() {
  if (_internal_has_json_payload()) {
    _impl_.result_.json_payload_.Destroy();
    clear_has_result();
  }
}
inline const std::string& ConformanceResponse::json_payload() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceResponse.json_payload)
  return _internal_json_payload();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceResponse::set_json_payload(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_json_payload()) {
    clear_result();
    set_has_json_payload();
    _impl_.result_.json_payload_.InitDefault();
  }
  _impl_.result_.json_payload_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceResponse.json_payload)
}
inline std::string* ConformanceResponse::mutable_json_payload() {
  std::string* _s = _internal_mutable_json_payload();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceResponse.json_payload)
  return _s;
}
inline const std::string& ConformanceResponse::_internal_json_payload() const {
  if (_internal_has_json_payload()) {
    return _impl_.result_.json_payload_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceResponse::_internal_set_json_payload(const std::string& value) {
  if (!_internal_has_json_payload()) {
    clear_result();
    set_has_json_payload();
    _impl_.result_.json_payload_.InitDefault();
  }
  _impl_.result_.json_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceResponse::_internal_mutable_json_payload() {
  if (!_internal_has_json_payload()) {
    clear_result();
    set_has_json_payload();
    _impl_.result_.json_payload_.InitDefault();
  }
  return _impl_.result_.json_payload_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceResponse::release_json_payload() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceResponse.json_payload)
  if (_internal_has_json_payload()) {
    clear_has_result();
    return _impl_.result_.json_payload_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceResponse::set_allocated_json_payload(std::string* json_payload) {
  if (has_result()) {
    clear_result();
  }
  if (json_payload != nullptr) {
    set_has_json_payload();
    _impl_.result_.json_payload_.InitAllocated(json_payload, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceResponse.json_payload)
}

// string skipped = 5;
inline bool ConformanceResponse::_internal_has_skipped() const {
  return result_case() == kSkipped;
}
inline bool ConformanceResponse::has_skipped() const {
  return _internal_has_skipped();
}
inline void ConformanceResponse::set_has_skipped() {
  _impl_._oneof_case_[0] = kSkipped;
}
inline void ConformanceResponse::clear_skipped() {
  if (_internal_has_skipped()) {
    _impl_.result_.skipped_.Destroy();
    clear_has_result();
  }
}
inline const std::string& ConformanceResponse::skipped() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceResponse.skipped)
  return _internal_skipped();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceResponse::set_skipped(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_skipped()) {
    clear_result();
    set_has_skipped();
    _impl_.result_.skipped_.InitDefault();
  }
  _impl_.result_.skipped_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceResponse.skipped)
}
inline std::string* ConformanceResponse::mutable_skipped() {
  std::string* _s = _internal_mutable_skipped();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceResponse.skipped)
  return _s;
}
inline const std::string& ConformanceResponse::_internal_skipped() const {
  if (_internal_has_skipped()) {
    return _impl_.result_.skipped_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceResponse::_internal_set_skipped(const std::string& value) {
  if (!_internal_has_skipped()) {
    clear_result();
    set_has_skipped();
    _impl_.result_.skipped_.InitDefault();
  }
  _impl_.result_.skipped_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceResponse::_internal_mutable_skipped() {
  if (!_internal_has_skipped()) {
    clear_result();
    set_has_skipped();
    _impl_.result_.skipped_.InitDefault();
  }
  return _impl_.result_.skipped_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceResponse::release_skipped() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceResponse.skipped)
  if (_internal_has_skipped()) {
    clear_has_result();
    return _impl_.result_.skipped_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceResponse::set_allocated_skipped(std::string* skipped) {
  if (has_result()) {
    clear_result();
  }
  if (skipped != nullptr) {
    set_has_skipped();
    _impl_.result_.skipped_.InitAllocated(skipped, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceResponse.skipped)
}

// string jspb_payload = 7;
inline bool ConformanceResponse::_internal_has_jspb_payload() const {
  return result_case() == kJspbPayload;
}
inline bool ConformanceResponse::has_jspb_payload() const {
  return _internal_has_jspb_payload();
}
inline void ConformanceResponse::set_has_jspb_payload() {
  _impl_._oneof_case_[0] = kJspbPayload;
}
inline void ConformanceResponse::clear_jspb_payload() {
  if (_internal_has_jspb_payload()) {
    _impl_.result_.jspb_payload_.Destroy();
    clear_has_result();
  }
}
inline const std::string& ConformanceResponse::jspb_payload() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceResponse.jspb_payload)
  return _internal_jspb_payload();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceResponse::set_jspb_payload(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_jspb_payload()) {
    clear_result();
    set_has_jspb_payload();
    _impl_.result_.jspb_payload_.InitDefault();
  }
  _impl_.result_.jspb_payload_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceResponse.jspb_payload)
}
inline std::string* ConformanceResponse::mutable_jspb_payload() {
  std::string* _s = _internal_mutable_jspb_payload();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceResponse.jspb_payload)
  return _s;
}
inline const std::string& ConformanceResponse::_internal_jspb_payload() const {
  if (_internal_has_jspb_payload()) {
    return _impl_.result_.jspb_payload_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceResponse::_internal_set_jspb_payload(const std::string& value) {
  if (!_internal_has_jspb_payload()) {
    clear_result();
    set_has_jspb_payload();
    _impl_.result_.jspb_payload_.InitDefault();
  }
  _impl_.result_.jspb_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceResponse::_internal_mutable_jspb_payload() {
  if (!_internal_has_jspb_payload()) {
    clear_result();
    set_has_jspb_payload();
    _impl_.result_.jspb_payload_.InitDefault();
  }
  return _impl_.result_.jspb_payload_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceResponse::release_jspb_payload() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceResponse.jspb_payload)
  if (_internal_has_jspb_payload()) {
    clear_has_result();
    return _impl_.result_.jspb_payload_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceResponse::set_allocated_jspb_payload(std::string* jspb_payload) {
  if (has_result()) {
    clear_result();
  }
  if (jspb_payload != nullptr) {
    set_has_jspb_payload();
    _impl_.result_.jspb_payload_.InitAllocated(jspb_payload, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceResponse.jspb_payload)
}

// string text_payload = 8;
inline bool ConformanceResponse::_internal_has_text_payload() const {
  return result_case() == kTextPayload;
}
inline bool ConformanceResponse::has_text_payload() const {
  return _internal_has_text_payload();
}
inline void ConformanceResponse::set_has_text_payload() {
  _impl_._oneof_case_[0] = kTextPayload;
}
inline void ConformanceResponse::clear_text_payload() {
  if (_internal_has_text_payload()) {
    _impl_.result_.text_payload_.Destroy();
    clear_has_result();
  }
}
inline const std::string& ConformanceResponse::text_payload() const {
  // @@protoc_insertion_point(field_get:conformance.ConformanceResponse.text_payload)
  return _internal_text_payload();
}
template <typename ArgT0, typename... ArgT>
inline void ConformanceResponse::set_text_payload(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_text_payload()) {
    clear_result();
    set_has_text_payload();
    _impl_.result_.text_payload_.InitDefault();
  }
  _impl_.result_.text_payload_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conformance.ConformanceResponse.text_payload)
}
inline std::string* ConformanceResponse::mutable_text_payload() {
  std::string* _s = _internal_mutable_text_payload();
  // @@protoc_insertion_point(field_mutable:conformance.ConformanceResponse.text_payload)
  return _s;
}
inline const std::string& ConformanceResponse::_internal_text_payload() const {
  if (_internal_has_text_payload()) {
    return _impl_.result_.text_payload_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConformanceResponse::_internal_set_text_payload(const std::string& value) {
  if (!_internal_has_text_payload()) {
    clear_result();
    set_has_text_payload();
    _impl_.result_.text_payload_.InitDefault();
  }
  _impl_.result_.text_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ConformanceResponse::_internal_mutable_text_payload() {
  if (!_internal_has_text_payload()) {
    clear_result();
    set_has_text_payload();
    _impl_.result_.text_payload_.InitDefault();
  }
  return _impl_.result_.text_payload_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConformanceResponse::release_text_payload() {
  // @@protoc_insertion_point(field_release:conformance.ConformanceResponse.text_payload)
  if (_internal_has_text_payload()) {
    clear_has_result();
    return _impl_.result_.text_payload_.Release();
  } else {
    return nullptr;
  }
}
inline void ConformanceResponse::set_allocated_text_payload(std::string* text_payload) {
  if (has_result()) {
    clear_result();
  }
  if (text_payload != nullptr) {
    set_has_text_payload();
    _impl_.result_.text_payload_.InitAllocated(text_payload, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:conformance.ConformanceResponse.text_payload)
}

inline bool ConformanceResponse::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void ConformanceResponse::clear_has_result() {
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}
inline ConformanceResponse::ResultCase ConformanceResponse::result_case() const {
  return ConformanceResponse::ResultCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// JspbEncodingConfig

// bool use_jspb_array_any_format = 1;
inline void JspbEncodingConfig::clear_use_jspb_array_any_format() {
  _impl_.use_jspb_array_any_format_ = false;
}
inline bool JspbEncodingConfig::_internal_use_jspb_array_any_format() const {
  return _impl_.use_jspb_array_any_format_;
}
inline bool JspbEncodingConfig::use_jspb_array_any_format() const {
  // @@protoc_insertion_point(field_get:conformance.JspbEncodingConfig.use_jspb_array_any_format)
  return _internal_use_jspb_array_any_format();
}
inline void JspbEncodingConfig::_internal_set_use_jspb_array_any_format(bool value) {
  
  _impl_.use_jspb_array_any_format_ = value;
}
inline void JspbEncodingConfig::set_use_jspb_array_any_format(bool value) {
  _internal_set_use_jspb_array_any_format(value);
  // @@protoc_insertion_point(field_set:conformance.JspbEncodingConfig.use_jspb_array_any_format)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace conformance

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::conformance::WireFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::conformance::WireFormat>() {
  return ::conformance::WireFormat_descriptor();
}
template <> struct is_proto_enum< ::conformance::TestCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::conformance::TestCategory>() {
  return ::conformance::TestCategory_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_conformance_2eproto
